{"version":3,"sources":["firebase.js","App.js","registerServiceWorker.js","index.js"],"names":["firebaseConf","firebase","initializeApp","apiKey","authDomain","databaseURL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","form","alert","alertData","type","message","_this2","setState","setTimeout","refs","contactForm","reset","_this3","database","ref","orderByKey","limitToLast","on","snapshot","_snapshot$val","val","data","name","email","city","phone","concat","e","_this4","preventDefault","params","inputName","value","inputEmail","inputCity","inputPhone","textAreaMessage","push","then","showAlert","catch","resetForm","_this5","react_default","a","createElement","className","onSubmit","sendMessage","bind","htmlFor","id","placeholder","rows","role","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2OAUeA,SAFMC,EAASC,cANf,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,2CC2GFC,qBA1Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,OAAO,EACPC,UAAW,IALIV,yEASTW,EAAMC,GAAS,IAAAC,EAAAV,KACvBA,KAAKW,SAAS,CACZL,OAAO,EACPC,UAAW,CAAEC,OAAMC,aAErBG,WAAW,WACTF,EAAKC,SAAS,CAAEL,OAAO,KACtB,yCAIHN,KAAKa,KAAKC,YAAYC,qDAGH,IAAAC,EAAAhB,KACLX,EAAa4B,WAAWC,IAAI,QAAQC,aAAaC,YAAY,GACnEC,GAAG,cAAe,SAAAC,GAAY,IAAAC,EACUD,EAASE,MACjDC,EAAO,CAAEC,KAFqBH,EAC5BG,KACaC,MAFeJ,EACtBI,MACcC,KAFQL,EACfK,KACaC,MAFEN,EACTM,MACcpB,QAFLc,EACFd,SAElCO,EAAKL,SAAS,CAAEN,KAAM,CAACoB,GAAMK,OAAOd,EAAKZ,MAAMC,8CAIvC0B,GAAG,IAAAC,EAAAhC,KACb+B,EAAEE,iBACF,IAAMC,EAAS,CACbR,KAAM1B,KAAKmC,UAAUC,MACrBT,MAAO3B,KAAKqC,WAAWD,MACvBR,KAAM5B,KAAKsC,UAAUF,MACrBP,MAAO7B,KAAKuC,WAAWH,MACvB3B,QAAST,KAAKwC,gBAAgBJ,OAE5BF,EAAOR,MAAQQ,EAAOP,OAASO,EAAOL,OAASK,EAAOL,OAASK,EAAOzB,SACxEpB,EAAa4B,WAAWC,IAAI,QAAQuB,KAAKP,GAAQQ,KAAK,WACpDV,EAAKW,UAAU,UAAW,wCACzBC,MAAM,WACPZ,EAAKW,UAAU,SAAU,uCAE3B3C,KAAK6C,aAEL7C,KAAK2C,UAAU,UAAW,yDAIrB,IAAAG,EAAA9C,KACP,OACE+C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,mCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUnD,KAAKoD,YAAYC,KAAKrD,MAAOkB,IAAI,eAC/C6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,QAAf,QACAP,EAAAC,EAAAC,cAAA,SAAOzC,KAAK,OAAO0C,UAAU,eAAeK,GAAG,OAAOC,YAAY,OAAOtC,IAAK,SAAAQ,GAAI,OAAIoB,EAAKX,UAAYT,MAEzGqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,sBAAf,SACAP,EAAAC,EAAAC,cAAA,SAAOzC,KAAK,QAAQ0C,UAAU,eAAeK,GAAG,QAAQC,YAAY,QAAQtC,IAAK,SAAAS,GAAK,OAAImB,EAAKT,WAAaV,MAE9GoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,QAAf,QACAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeK,GAAG,OAAOrC,IAAK,SAAAU,GAAI,OAAIkB,EAAKR,UAAYV,IACvEmB,EAAAC,EAAAC,cAAA,UAAQb,MAAM,aAAd,WACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,aAAd,SACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,eAAd,WACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,aAAd,iBACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,aAAd,UACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,aAAd,YAGJW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,SAAf,SACAP,EAAAC,EAAAC,cAAA,SAAOzC,KAAK,SAAS0C,UAAU,eAAeK,GAAG,QAAQC,YAAY,MAAMtC,IAAK,SAAAW,GAAK,OAAIiB,EAAKP,WAAaV,MAE7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,WAAf,WACAP,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeK,GAAG,UAAUE,KAAK,IAAIvC,IAAK,SAAAT,GAAO,OAAIqC,EAAKN,gBAAkB/B,MAElGsC,EAAAC,EAAAC,cAAA,UAAQzC,KAAK,SAAS0C,UAAU,mBAAhC,SAGDlD,KAAKI,MAAME,OAASyC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAApB,OAAiB9B,KAAKI,MAAMG,UAAUC,MAAQkD,KAAK,SACpFX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZlD,KAAKI,MAAMG,UAAUE,qBAhGtBkD,cCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,KAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrE,QACfgE,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBlC,MAAM,SAAAmC,GACLF,QAAQE,MAAM,4CAA6CA,KCjEjEC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,gCAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAArC,OAAMwD,gCAAN,sBAEP1B,EAwCV,SAAiCO,GAE/BsB,MAAMtB,GACHzB,KAAK,SAAAgD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMrD,KAAK,SAAA6B,GACjCA,EAAayB,aAAatD,KAAK,WAC7BoB,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBvB,MAAM,WACLiC,QAAQC,IACN,mEA5DAoB,CAAwB/B,GAGxBD,EAAgBC,MCjCxBgC","file":"static/js/main.f46e6f67.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyAAj83OWg74eUHaXcXriVYFklT5AZAC7m0\",\n    authDomain: \"deevesoft-14fc0.firebaseapp.com\",\n    databaseURL: \"https://deevesoft-14fc0.firebaseio.com\"\n};\n\nconst firebaseConf = firebase.initializeApp(config);\n\nexport default firebaseConf;\n","import React, { Component } from 'react';\nimport firebaseConf from './firebase';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: [],\n      alert: false,\n      alertData: {}\n    };\n  }\n\n  showAlert(type, message) {\n    this.setState({\n      alert: true,\n      alertData: { type, message }\n    });\n    setTimeout(() => {\n      this.setState({ alert: false });\n    }, 4000)\n  }\n\n  resetForm() {\n    this.refs.contactForm.reset();\n  }\n\n  componentWillMount() {\n    let formRef = firebaseConf.database().ref('form').orderByKey().limitToLast(6);\n    formRef.on('child_added', snapshot => {\n      const { name, email, city, phone, message } = snapshot.val();\n      const data = { name, email, city, phone, message };\n      this.setState({ form: [data].concat(this.state.form) });\n    })\n  }\n\n  sendMessage(e) {\n    e.preventDefault();\n    const params = {\n      name: this.inputName.value,\n      email: this.inputEmail.value,\n      city: this.inputCity.value,\n      phone: this.inputPhone.value,\n      message: this.textAreaMessage.value\n    };\n    if (params.name && params.email && params.phone && params.phone && params.message) {\n      firebaseConf.database().ref('form').push(params).then(() => {\n        this.showAlert('success', 'Your message was sent successfully');\n      }).catch(() => {\n        this.showAlert('danger', 'Your message could not be sent !!');\n      });\n      this.resetForm();\n    } else {\n      this.showAlert('warning', 'Please fill the form');\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <p className=\"main-head\"> Firebase-ReactJS Contact Form </p>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-sm-4 form'>\n              <h2>Contact Form</h2>\n              <form onSubmit={this.sendMessage.bind(this)} ref='contactForm' >\n                <div className='form-group'>\n                  <label htmlFor='name'>Name</label>\n                  <input type='text' className='form-control' id='name' placeholder='Name' ref={name => this.inputName = name} />\n                </div>\n                <div className='form-group'>\n                  <label htmlFor='exampleInputEmail1'>Email</label>\n                  <input type='email' className='form-control' id='email' placeholder='Email' ref={email => this.inputEmail = email} />\n                </div>\n                <div className='form-group'>\n                  <label htmlFor='city'>City</label>\n                  <select className='form-control' id='city' ref={city => this.inputCity = city}>\n                    <option value='México'>Bikaner</option>\n                    <option value='México'>Delhi</option>\n                    <option value='Guadalajara'>Gwalior</option>\n                    <option value='Monterrey'>Greater Noida</option>\n                    <option value='México'>Indore</option>\n                    <option value='México'>Mumbai</option>\n                  </select>\n                </div>\n                <div className='form-group'>\n                  <label htmlFor='phone'>Phone</label>\n                  <input type='number' className='form-control' id='phone' placeholder='+91' ref={phone => this.inputPhone = phone} />\n                </div>\n                <div className='form-group'>\n                  <label htmlFor='message'>Message</label>\n                  <textarea className='form-control' id='message' rows='3' ref={message => this.textAreaMessage = message}></textarea>\n                </div>\n                <button type='submit' className='btn btn-primary'>Send</button>\n              </form>\n\n              {this.state.alert && <div className={`alert alert-${this.state.alertData.type}`} role='alert'>\n                <div className='container'>\n                  {this.state.alertData.message}\n                </div>\n              </div>}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}